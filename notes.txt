# MERN Chat & Video Calling Application - Complete Project Documentation

## Project Overview
A full-stack real-time chat and video calling application built with the MERN stack (MongoDB, Express.js, React, Node.js) featuring WebRTC for peer-to-peer video calls and Socket.IO for real-time messaging.

## Architecture Overview

### Tech Stack
- **Frontend**: React 18 + Vite + Tailwind CSS
- **Backend**: Node.js + Express.js + Socket.IO
- **Database**: MongoDB with Mongoose ODM
- **Real-time**: Socket.IO for chat, WebRTC for video calls
- **Containerization**: Docker + Docker Compose
- **Authentication**: JWT tokens

### System Architecture
```
┌─────────────┐    ┌─────────────┐    ┌─────────────┐
│   Client   │    │   Server   │    │  MongoDB   │
│  (React)   │◄──►│ (Express)  │◄──►│  Database  │
│             │    │             │    │             │
│ - Chat UI  │    │ - REST API │    │ - Users    │
│ - Video    │    │ - Socket.IO│    │ - Messages │
│ - Auth     │    │ - WebRTC   │    │ - Convos   │
└─────────────┘    └─────────────┘    └─────────────┘
```

## Core Concepts Explained

### 1. Real-time Communication
- **Socket.IO**: Handles real-time bidirectional communication between client and server
- **WebRTC**: Enables peer-to-peer video/audio calls without server relay
- **Signaling**: Server coordinates WebRTC connection establishment

### 2. Authentication & Security
- **JWT Tokens**: Stateless authentication using signed tokens
- **Middleware**: Route protection ensuring only authenticated users access private endpoints
- **CORS**: Cross-origin resource sharing configuration for security

### 3. Data Privacy & Isolation
- **User Isolation**: Each user only sees their own contacts and conversations
- **Conversation Keys**: Unique identifiers for participant pairs preventing cross-user access
- **Authorization**: Server-side validation ensuring users can only access their data

### 4. Contact Management
- **Personal Contacts**: Each user maintains their own contact list
- **Search & Add**: Users can search for others and add them to contacts
- **Email Invites**: Send registration links to non-users via SMTP

## Code Structure & Explanation

### Server Structure (`server/src/`)

#### Models
- **User.js**: User schema with password hashing, contacts array
- **Conversation.js**: Chat conversations with unique participant keys
- **Message.js**: Individual messages linked to conversations

#### Routes
- **auth.js**: Registration, login, user profile endpoints
- **users.js**: User search and profile retrieval
- **contacts.js**: Contact management (add/remove/list)
- **messages.js**: Message history and conversation management
- **invite.js**: Email invitation system

#### Socket Handlers (`socket.js`)
- **Connection Management**: Track online users and socket mappings
- **Message Handling**: Real-time message delivery to participants only
- **WebRTC Signaling**: Coordinate call offers, answers, and ICE candidates
- **Presence**: Broadcast online/offline status changes

#### Middleware (`auth.js`)
- **JWT Verification**: Validate tokens for HTTP and Socket.IO connections
- **Token Creation**: Generate JWT tokens with user payload

### Client Structure (`client/src/`)

#### Components
- **App.jsx**: Main router with authentication guard
- **Chat.jsx**: Main chat interface with contacts and messaging
- **Call.jsx**: Video calling interface with WebRTC
- **IncomingCallModal.jsx**: Call notification popup
- **CallToaster.jsx**: Global call listener component

#### Services
- **api.js**: Axios instance with auth headers and 401 handling
- **socket.js**: Socket.IO connection management
- **webrtc.js**: WebRTC peer connection setup

#### State Management
- **auth.js**: Token storage and auth state management
- **call.js**: Incoming call state management

## Key Features Implementation

### 1. Real-time Chat
```javascript
// Server: Socket.IO message handling
socket.on('message:send', async ({ toUserId, content }) => {
    const convo = await ensureConversation(userId, toUserId);
    const message = await Message.create({...});
    // Emit ONLY to sender and recipient
    io.to(`user:${userId}`).emit('message:new', payload);
    io.to(`user:${toUserId}`).emit('message:new', payload);
});

// Client: Message reception
socket.on('message:new', (m) => {
    const isBetweenUs = (m.sender === recipient.id && m.recipient === me.id) || 
                       (m.sender === me.id && m.recipient === recipient.id);
    if (isBetweenUs) setMessages((prev) => [...prev, m]);
});
```

### 2. Video Calling
```javascript
// WebRTC peer connection setup
const pc = new RTCPeerConnection({ 
    iceServers: [{ urls: ['stun:stun.l.google.com:19302'] }] 
});

// Signaling via Socket.IO
socket.emit('call:offer', { toUserId, offer });
socket.on('call:answer', ({ fromUserId, answer }) => {
    await pc.setRemoteDescription(new RTCSessionDescription(answer));
});
```

### 3. Contact Management
```javascript
// Add contact to personal list
await api.post('/api/contacts', { userId: u.id });

// Fetch only user's contacts
const { data } = await api.get('/api/contacts');
```

### 4. Privacy & Security
```javascript
// Conversation uniqueness
const key = Conversation.keyFor(userA, userB);
let convo = await Conversation.findOne({ key });

// Authorization check
if (!convo.participants.some(p => String(p) === String(req.user.id))) {
    return res.status(403).json({ error: 'Forbidden' });
}
```

## Setup & Deployment Procedures

### Local Development
1. **Clone & Setup**
   ```bash
   git clone <repo>
   cd chatting-calling-app-MERN
   ```

2. **Environment Configuration**
   ```bash
   # Server (.env)
   PORT=5000
   MONGO_URI=mongodb://mongo:27017/mern_chat
   JWT_SECRET=your_secure_secret
   CORS_ORIGIN=http://localhost:8080
   
   # Client (.env)
   VITE_API_URL=http://localhost:5000
   VITE_SOCKET_URL=http://localhost:5000
   ```

3. **Start Development Stack**
   ```bash
   docker compose -f docker-compose.dev.yml up --build
   ```

4. **Access Application**
   - Frontend: http://localhost:8080
   - Backend: http://localhost:5000
   - Hot reload enabled for both client and server

### Production Deployment
1. **Build Production Images**
   ```bash
   docker compose up -d --build
   ```

2. **Environment Variables for Production**
   ```bash
   # Server
   CORS_ORIGIN=https://yourdomain.com
   APP_BASE_URL=https://yourdomain.com
   SMTP_HOST=smtp.yourdomain.com
   SMTP_PORT=587
   SMTP_USER=your_smtp_user
   SMTP_PASS=your_smtp_password
   SMTP_FROM="Chat App <no-reply@yourdomain.com>"
   
   # Client
   VITE_API_URL=https://yourdomain.com/api
   VITE_SOCKET_URL=https://yourdomain.com
   ```

3. **AWS Deployment Options**
   - **EC2**: Single instance with Docker Compose
   - **ECS**: Container orchestration with load balancer
   - **RDS**: Managed MongoDB or use MongoDB Atlas

### Network Configuration

#### Local Network Access
- **Same Wi-Fi**: http://<PC_LAN_IP>:8080
- **CORS**: Set `CORS_ORIGIN=http://<PC_LAN_IP>:8080`

#### Public Internet Access
1. **Firewall**: Allow inbound TCP 8080, 5000
2. **Router**: Port forward 8080→PC:8080, 5000→PC:5000
3. **CORS**: Set `CORS_ORIGIN=http://<PUBLIC_IP>:8080`
4. **Rebuild**: `docker compose up -d --build`

## Testing & Usage

### User Testing
1. **Register Multiple Users**: Open multiple browsers/incognito windows
2. **Add Contacts**: Search for users and add to contacts
3. **Chat Testing**: Send messages between users
4. **Video Calls**: Test WebRTC functionality
5. **Invite System**: Test email invitations (requires SMTP setup)

### API Testing
- **Health Check**: GET /api/health
- **Authentication**: POST /api/auth/register, POST /api/auth/login
- **Users**: GET /api/users, GET /api/users/search
- **Contacts**: GET /api/contacts, POST /api/contacts
- **Messages**: GET /api/messages/with/:userId

## Troubleshooting

### Common Issues
1. **Port Conflicts**: Change ports in docker-compose.yml
2. **CORS Errors**: Verify CORS_ORIGIN matches client URL
3. **WebRTC Issues**: Check STUN/TURN server configuration
4. **Email Invites**: Verify SMTP credentials and firewall settings

### Debug Commands
```bash
# View logs
docker compose logs -f server
docker compose logs -f client

# Check container status
docker compose ps

# Restart specific service
docker compose restart server

# Rebuild and restart
docker compose up -d --build
```

## Security Considerations

### Implemented Security
- JWT token authentication
- Password hashing with bcrypt
- CORS configuration
- User data isolation
- Input validation and sanitization

### Recommended Enhancements
- Rate limiting
- HTTPS enforcement
- Input sanitization
- SQL injection prevention (MongoDB is generally safe)
- XSS protection
- CSRF tokens

## Performance & Scalability

### Current Optimizations
- Database indexing on frequently queried fields
- Efficient conversation key generation
- Minimal data transfer in real-time events
- Connection pooling with MongoDB

### Scaling Considerations
- Redis for session management
- Load balancing for multiple server instances
- Database sharding for large user bases
- CDN for static assets
- Microservices architecture for complex deployments

## Future Enhancements

### Planned Features
- Group chats and channels
- File sharing
- Message encryption
- Push notifications
- Mobile app (React Native)
- Admin dashboard
- Analytics and monitoring

### Technical Improvements
- GraphQL API
- TypeScript migration
- Unit and integration tests
- CI/CD pipeline
- Monitoring and logging
- Performance metrics

## Conclusion

This MERN stack application demonstrates modern web development practices including:
- Real-time communication with Socket.IO
- Peer-to-peer video calling with WebRTC
- Secure authentication and authorization
- Containerized deployment with Docker
- Responsive UI with Tailwind CSS
- Privacy-focused data isolation

The application is production-ready with proper security measures, scalable architecture, and comprehensive error handling. It serves as a solid foundation for real-time communication applications and can be extended with additional features as needed.
